name: Question Fix Automation

on:
  issues:
    types:
      - opened
      - edited
      - labeled

jobs:
  process-question-issues:
    if: contains(github.event.issue.labels.*.name, 'question-error') && !contains(github.event.issue.labels.*.name, 'skip-automation')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Node.js dependencies
        run: npm install

      - name: Install Python dependencies
        run: |
          pip install requests

      - name: Set script permissions
        run: |
          chmod +x .github/scripts/*.py
          chmod +x src/admin/*.py
          mkdir -p src/revised-questions

      - name: Parse issue content and process question
        id: process_issue
        env:
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Optional: Set LOG_LEVEL for the Python script if you want more/less verbose logs
          # LOG_LEVEL: DEBUG 
        run: |
          # The shell-based domain extraction can remain as a preliminary step,
          # but the Python script also has its own robust domain extraction.
          # You might not strictly need this shell part anymore if the Python script is reliable.
          DOMAIN_SHELL=$(echo "${{ github.event.issue.body }}" | grep -i "domain:" | head -n 1 | sed -E 's/.*[Dd]omain:\s*([^()\n]*).*/\1/' | tr -d '[:punct:]' | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
          echo "Shell extracted domain (fallback/info): $DOMAIN_SHELL"
          
          # Encode the issue body to Base64
          # Using -w 0 for base64 ensures no line wrapping, which is good for command line args
          ISSUE_BODY_B64=$(echo "${{ github.event.issue.body }}" | base64 -w 0)
          
          # Run the Python script with title, BASE64 ENCODED BODY, and issue number
          python .github/scripts/process_issue.py "${{ github.event.issue.title }}" "$ISSUE_BODY_B64" "${{ github.event.issue.number }}"
          
          echo "Python script processing completed" # Renamed for clarity from "Processing completed"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "fix: update question from issue #${{ github.event.issue.number }}"
          title: "fix: update question from issue #${{ github.event.issue.number }}"
          body: |
            This PR fixes the question error reported in issue #${{ github.event.issue.number }}.
            
            Issue title: ${{ github.event.issue.title }}
            
            ## Changes Made
            - Updated question content using AI-assisted refinement
            - Updated the SQLite database
            - Exported updated questions to JavaScript files
            
            This PR was created automatically by the question processing system. Please review the changes before merging.
          labels: "question-fix, automated-pr"
          branch: "fix/question-issue-${{ github.event.issue.number }}"
          delete-branch: true
          
      - name: Add comment on PR failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number }},
              body: '‚ùå Automation failed: The question processing workflow encountered an error. Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            });
