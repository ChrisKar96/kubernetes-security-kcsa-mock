name: Question Fix Automation

on:
  issues:
    types:
      - opened
      - edited
      - labeled # This is the key trigger after auto-labeling

jobs:
  process-question-issues:
    # This condition is critical and should now work reliably after auto-labeling
    if: contains(github.event.issue.labels.*.name, 'question-error') && !contains(github.event.issue.labels.*.name, 'skip-automation')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Consider v4
        with:
          node-version: '20' # Keep or update as per your project's needs

      - name: Setup Python
        uses: actions/setup-python@v5 # Consider v5
        with:
          python-version: '3.10' # Keep or update

      - name: Install Node.js dependencies
        run: npm install # Ensure you have a package.json if this is needed at the root

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests # Add other Python dependencies if process_issue.py needs them

      - name: Set script permissions
        run: |
          chmod +x .github/scripts/*.py
          chmod +x src/admin/*.py  # If scripts are directly in src/admin
          mkdir -p src/revised-questions

      - name: Parse issue content and process question
        id: process_issue
        env:
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LOG_LEVEL: INFO 
        run: |
          echo "Attempting to process issue #${{ github.event.issue.number }} titled: ${{ github.event.issue.title }}"
          
          ISSUE_BODY_B64=$(echo "${{ github.event.issue.body }}" | base64 -w 0)
          if [ -z "$ISSUE_BODY_B64" ]; then
            echo "Warning: Issue body is empty after base64 encoding attempt."
          fi
          
          # Execute the Python script and capture its full output
          SCRIPT_OUTPUT=$(python .github/scripts/process_issue.py "${{ github.event.issue.title }}" "$ISSUE_BODY_B64" "${{ github.event.issue.number }}")
          
          # Echo the full script output for debugging (optional, can be verbose)
          echo "Full script output:"
          echo "$SCRIPT_OUTPUT"
          echo "End of full script output."

          # Extract the PR message content
          # Using sed: find the line with PR_BODY_CONTENT::, then print from that line to the end, then remove the prefix from the first line.
          PR_MESSAGE_LINES=$(echo "$SCRIPT_OUTPUT" | sed -n '/PR_BODY_CONTENT::/,$p')
          PR_MESSAGE_FINAL_CONTENT=$(echo "$PR_MESSAGE_LINES" | sed '1s/PR_BODY_CONTENT:://')

          # Fallback message if PR_MESSAGE_FINAL_CONTENT is empty after extraction
          if [ -z "$PR_MESSAGE_FINAL_CONTENT" ]; then
            echo "No specific PR message content found in script output. Using fallback."
            PR_MESSAGE_FINAL_CONTENT="AI-assisted refinement might have been applied. Database and exported question files were updated based on the issue."
          else
            echo "Extracted PR message content successfully."
          fi
          
          # Set the output for use in other steps
          echo "pr_message_content<<EOF" >> "$GITHUB_OUTPUT"
          echo "$PR_MESSAGE_FINAL_CONTENT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          
          echo "Python script processing step completed for issue #${{ github.event.issue.number }}"

      - name: Create Pull Request if changes were made
        id: create_pr # Added an ID here for potential future reference
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "fix(question): Update from issue #${{ github.event.issue.number }}"
          title: "Fix: Update question based on Issue #${{ github.event.issue.number }}"
          body: |
            This PR addresses issue #${{ github.event.issue.number }}: "${{ github.event.issue.title }}".

            ${{ steps.process_issue.outputs.pr_message_content }}
            
            This PR was created automatically. Please review the changes before merging.
          labels: "question-fix, automated-pr"
          branch: "fix/question-issue-${{ github.event.issue.number }}"
          delete-branch: true

      - name: Comment on issue if processing completed but no PR was created
        # This can happen if the Python script ran but made no file changes detectable by create-pull-request
        if: steps.process_issue.outcome == 'success' && steps.create-pull-request.outputs.pull-request-operation == 'closed' # Heuristic: PR closed often means no changes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number }},
              body: '✅ Automated processing for Issue #${{ github.event.issue.number }} completed. No file changes were detected that required a Pull Request. The issue might have been resolved by the script without file modifications, or the reported error did not lead to changes.'
            });

      - name: Add comment on overall job failure (if not covered by PR failure)
        if: failure() && steps.create-pull-request.outcome != 'success' # Or a more specific condition
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number }},
              body: '❌ Automation failed: The question processing workflow encountered an error. Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            });